/* This will select everything and give everything the box-sizing value box-border */
*, *::after, *::before {
    box-sizing: border-box;
}

/* -- custom property whose value I can use for 
other declarations using the var() function */
:root {
    --cell-size: 100px;
    /* sets our  x's and 0's to 90% of our cell sizes */
    --mark-size: calc(var(--cell-size) * .9)
}

body {
    margin: 0;
}

/*  Wraps all of the cells */
/* display: grid; will */
.board {
    width: 100vw;
    height: 100vh;
    display: grid;
    justify-content: center;
    align-content: center;

    /* aligns our x's and 0's in our cells */
    justify-items: center;
    align-items: center;

    /* creates three seperate columns auto sized */
    grid-template-columns: repeat(3, auto);
}

.cell {
    width: var(--cell-size);
    height: var(--cell-size);
    border: 1px solid black;
    display: flex;
    justify-content: center;
    align-items: center;
    /* scales the x correctly which is positioned absolut */
    position: relative;
    cursor: pointer;
}

/* Removes the top cell's borders */
.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3) {
    border-top: none;
}

/* Removes the left side cell's borders
   by grabbing every third cell starting from the first */
.cell:nth-child(3n+1) {
    border-left: none;
}


/* Removes the bottom cell's borders */
.cell:last-child,
.cell:nth-child(8),
.cell:nth-child(7) {
    border-bottom: none;
}

/* Removes the left cell's borders */
.cell:nth-child(3n+3) {
    border-right: none;
}


.cell.x,
.cell.circle {
    cursor: not-allowed;
}

/* needs to be defined above lightgrey to overrides properly */
.cell.x::before,
.cell.x::after,
.cell.circle::before {
    background-color: black;
}

.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after,
.board.circle .cell:not(.x):not(.circle):hover::before {
    background-color: lightgrey;
}

/* show x when hovering */
/* :not(.x):not.(circle) causes it to do nothing when hovering over already filled spaces */
.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after {
    content: '';
 /* fixes x's scaling. .cell must be set to relative */  
    position: absolute;
    width: calc(var(--mark-size) * .15);
    height: var(--mark-size);
}

.cell.x::before,
.board.x .cell:not(.x):not(.circle):hover::before {
    transform: rotate(45deg);
}

.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after {
    transform: rotate(-45deg);
}

.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after {
    content: '';
    position: absolute;
    border-radius: 50%;
}

.cell.circle::before,
.board.circle .cell:not(.x):not(.circle):hover::before {
    width: var(--mark-size);
    height: var(--mark-size);
}

.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::after {
    width: calc(var(--mark-size) * .7);
    height: calc(var(--mark-size) * .7);
    background-color: white;
}


.winning-message {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, .9);
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 5rem;
    flex-direction: column;
  }
  
  .winning-message button {
    font-size: 3rem;
    background-color: white;
    border: 1px solid black;
    padding: .25em .5em;
    cursor: pointer;
  }
  
  .winning-message button:hover {
    background-color: black;
    color: white;
    border-color: white;
  }
  
  .winning-message.show {
    display: flex;
  }
  